package hwkang.cookie;

public class CacheServiceTest {

    /**
     *  권한은 있으나 인증한 적 없는 사람의 경우
     *
     *  1. URL 로 요청이 들어옴
     *  2. 검증
     *   2-1. 캐싱된 데이터가 있는지 확인 -> 없음
     *   2-2. DB 에서 조회 -> 있음
     *   2-3. 사용 여부 확인 -> Y
     *   2-4. 만료 기한 확인 -> 만료 기간 내
     *   2-5. 해당 사용자 캐싱 후 다음 단계로
     *  3. API 요청 권한에 있는 데이터인지 확인
     *   3-1. API 권한
     *  4. REDIRECT
     *
     * 3번이 따로 있는 이유는 어쨌든 이 사용자는 API 신청을 한 사용자이고 사용할 수 있는 API 리스트가 있기 때문에
     * 해당 리스트들을 캐싱할 필요가 있고 확인할 필요가 있음.
     */

    /**
     *  권한이 없고 인증한 적 없는 사람의 경우
     *
     *  1. URL 로 요청이 들어옴
     *  2. 검증
     *   2-1. 캐싱된 데이터가 있는지 확인 -> 없음
     *   2-2. DB 에서 조회 -> 없음
     *   2-3. THROW NEW EXCEPTION
     *  3. ERROR RESPONSE RETURN
     */

    /**
     *  권한이 없는데 인증한 적 있는 사람의 경우
     *   -> 이런 경우는 없음.
     *   -> 만에 하나의 사태를 대비해 주기적으로 캐시 데이터 초기화
     */

    /**
     *  권한은 있는데 만료 기한이 지났고 인증한 적이 있는 경우
     *  1. URL 로 요청이 들어옴
     *  2. 검증
     *   2-1. 캐싱된 데이터가 있는지 확인
     *
     */



    /**
     *  권한은 있지만 리스트랑 매핑이 안되는 경우
     */

    /**
     *  운영자가 신청 정보를 삭제한 경우
     *  1. 운영자가 데이터 삭제 후 캐시 데이터 삭제 요청
     *  2. 캐시 데이터 있는지 확인
     *   2-1. 있는 경우
     *    2-1-1. 해당 사용자의 API 리스트 캐시 데이터 삭제
     *    2-1-2. 해당 사용자 캐시 데이터 삭제
     *    2-1-3. 성공 리턴
     *   2-2. 없는 경우 성공 리턴
     *  3. 성공 리턴
     */

    /**
     *  운영자가 사용 여부 Y -> N
     *
     *  1. 운영자가 사용 여부 변경 후 캐시 데이터 삭제 요청
     *  2. 캐시 데이터 있는지 확인
     *   2-1. 있는 경우
     *    2-1-1. 해당 사용자의 API 리스트 캐시 데이터 삭제
     *    2-1-2. 해당 사용자 캐시 데이터 삭제
     *    2-1-3. 성공 리턴
     *   2-2. 없는 경우 성공 리턴
     *  3. 성공 리턴
     */

    /**
     *  운영자가 사용 여부 N -> Y
     *   -> 애초에 사용 여부가 N 이었으면 캐시 데이터 쌓일 일 없음
     */

    /*
    기타 오류
     -> 얘는 어케 잡을건데
     -> Cache Repository 를 내 눈으로 직접 볼 수 있어야 함
     */

}